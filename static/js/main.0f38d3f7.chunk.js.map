{"version":3,"sources":["containers/Auth/Auth.js","containers/App.js","serviceWorker.js","index.js"],"names":["Auth","state","inputs","email","name","type","label","placeholder","value","error","valid","message","validation","required","isEmail","password","minLength","checkValidity","rules","isValid","length","trim","test","_this","status","disabled","inputChangeHandler","e","updatedInput","Object","objectSpread","defineProperty","target","setState","submitHandler","preventDefault","signIn","data","axios","post","headers","content-type","then","res","console","log","catch","alert","_this2","this","formElementArray","key","push","id","config","form","map","input","react_default","a","createElement","className","onChange","aria-describedby","method","onSubmit","ref","dis","Component","App","subjects","getSubjects","_callee","url","regenerator_default","wrap","_context","prev","next","get","stop","containers_Auth_Auth","Boolean","window","location","hostname","match","ReactDOM","render","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0f38d3f7.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport axios from 'axios';\r\n\r\nimport './Auth.css'\r\nclass Auth extends Component {\r\n    state = { \r\n        inputs : {\r\n            email:{\r\n                name : 'email',\r\n                type : 'email',\r\n                label: 'Email',\r\n                placeholder : 'Email',\r\n                value : '',\r\n                error : {\r\n                    valid : true,\r\n                    message: 'Email required',\r\n                },\r\n                validation:{\r\n                    required:true,\r\n                    isEmail:true,\r\n                }\r\n\r\n            },\r\n            password: {\r\n                name : 'password',\r\n                type : 'password',\r\n                label: 'Password',\r\n                placeholder : 'Password',\r\n                value : '',\r\n                error : {\r\n                    valid : true,\r\n                    message: 'Password is not valid',\r\n                },\r\n                validation:{\r\n                    required:true,\r\n                    minLength: 6\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    /** validation new input value */\r\n    checkValidity = ( value , rules ) => {\r\n        let isValid = true;\r\n\r\n        if(!rules){\r\n            return true;\r\n        }\r\n\r\n        if(rules.minLength){\r\n            isValid = value.length >= rules.minLength && isValid;\r\n        }\r\n\r\n        if(rules.required){\r\n            isValid = value.trim() !== '' && isValid;\r\n        }\r\n\r\n        if(rules.isEmail){\r\n            const pattern =  /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\r\n            isValid = pattern.test(value) && isValid;\r\n        }\r\n\r\n        this.status.disabled  = isValid ? null : 'disabled';\r\n\r\n        return isValid;\r\n    }\r\n\r\n\r\n    /** input changed */\r\n    inputChangeHandler = ( e , name ) => {\r\n        const updatedInput = {\r\n            ...this.state.inputs,\r\n            [ name ] : {\r\n                ...this.state.inputs[ name ],\r\n                value:e.target.value,\r\n                error:{\r\n                    valid : this.checkValidity(e.target.value , this.state.inputs[ name ].validation),\r\n                    message: this.state.inputs[name].error.message,\r\n                }\r\n            }\r\n        }\r\n\r\n        this.setState({ inputs: updatedInput });\r\n    }\r\n\r\n    /** on submit form */\r\n    submitHandler = e => {\r\n        e.preventDefault();\r\n        this.signIn(this.state.inputs.email.value, this.state.inputs.password.value)\r\n    }\r\n\r\n\r\n    /** get access Token */\r\n    signIn = ( email , password ) => {\r\n        const url = 'http://tsu.creativestudio.ge/oauth/token';\r\n        const config = {\r\n            headers: { 'content-type': 'application/x-www-form-urlencoded' },\r\n        };\r\n        const data = 'client_id=2&client_secret=aW9cf1Oke0p9iPPD9SjMCsFlXd5HfuhrLmjv1QHA&grant_type=password&password='+password+'&username='+email;\r\n\r\n        axios.post(url , data , config)\r\n            .then(res => {\r\n                console.log()\r\n            })\r\n            .catch( error => {\r\n                alert('Something went wrong, try again !!! ') ;\r\n            })\r\n    }\r\n\r\n    render() { \r\n        \r\n        /** initialize new array for map */\r\n        let formElementArray = [];\r\n        \r\n        /** push data to formElementArray */\r\n        for ( let key in this.state.inputs){\r\n            formElementArray.push({\r\n                id: key, \r\n                config: this.state.inputs[key]\r\n            })\r\n        }\r\n\r\n        /** draw all inputs */\r\n        const form = formElementArray.map( input => {\r\n            return <div className=\"form-group has-error\" key={ input.id }>\r\n                {/* <label htmlFor={ input.config.name } className=\"control-label\">{ input.config.label }</label> */}\r\n                <input type={ input.config.type } className={'form-control ' + (!input.config.error.valid? 'is-invalid' : null) } value={ input.config.value } name={ input.config.name } onChange={ (e) => this.inputChangeHandler( e , input.config.name  )  } id={ input.config.name } aria-describedby=\"emailHelp\" placeholder={ input.config.placeholder } />\r\n                {\r\n                    !input.config.error.valid ? \r\n                    <span className=\"help-block text-danger\">\r\n                        { input.config.error.message }\r\n                    </span> : null\r\n                }\r\n                \r\n            </div>\r\n        })\r\n\r\n\r\n        return ( \r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <form className=\"Auth\" method=\"post\" onSubmit={ this.submitHandler }>\r\n                        <h1>Authorisation</h1>\r\n                        <hr/>\r\n                        { form }  \r\n                        <button className=\"btn btn-primary\"  ref = { dis => this.status = dis }  disabled={this.status}> Submit </button>              \r\n                    </form>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n \r\nexport default Auth;","import React, { Component } from 'react';\nimport './App.css';\nimport axios from 'axios';\nimport Auth from './Auth/Auth';\n\nclass App extends Component {\n\n  state = {\n  \tsubjects : []\n  }\n\n\n  componentDidMount(){\n\t\tconst url = 'http://tsu.creativestudio.ge/subjects';\n\t\tthis.getSubjects(url);\n  }\n\n\tgetSubjects = async url => {\n\n\t\taxios.get(url).then( res => {\n\t\t\tthis.setState({ \n\t\t\t\tsubjects:res.data\n\t\t\t})\n\t\t})\n\t}\n\n  render(){\n    return (\n      <div className=\"App\"> \n\t\t\t\t\t<Auth />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}