{"version":3,"sources":["containers/App.js","serviceWorker.js","index.js"],"names":["App","state","subjects","getSubjects","_callee","url","regenerator_default","a","wrap","_context","prev","next","axios","get","then","res","_this","setState","data","stop","_this2","this","setInterval","console","log","react_default","createElement","className","border","map","item","key","id","title","faculty_id","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oTAwEeA,6MAlEbC,MAAQ,CACPC,SAAW,MAgBXC,kDAAc,SAAAC,EAAMC,GAAN,OAAAC,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAEZC,IAAMC,IAAIR,GAAKS,KAAM,SAAAC,GACpBC,EAAKC,SAAS,CACbf,SAASa,EAAIG,SAJH,wBAAAT,EAAAU,SAAAf,+IAZI,IAAAgB,EAAAC,KAIlBC,YAAY,WACXF,EAAKjB,YAHM,0CAIT,KAEHoB,QAAQC,IAAI,oBAAqBH,KAAKpB,MAAMC,2CAmB3C,OACEuB,EAAAlB,EAAAmB,cAAA,OAAKC,UAAU,OACZF,EAAAlB,EAAAmB,cAAA,SAAOE,OAAO,KACjBH,EAAAlB,EAAAmB,cAAA,aACCD,EAAAlB,EAAAmB,cAAA,UACED,EAAAlB,EAAAmB,cAAA,gBACAD,EAAAlB,EAAAmB,cAAA,mBACAD,EAAAlB,EAAAmB,cAAA,0BAIHD,EAAAlB,EAAAmB,cAAA,aAGCL,KAAKpB,MAAMC,SAAS2B,IAAK,SAAAC,GAExB,OACCL,EAAAlB,EAAAmB,cAAA,MAAIK,IAASD,EAAKE,IACjBP,EAAAlB,EAAAmB,cAAA,cAAOI,EAAKE,GAAZ,KACAP,EAAAlB,EAAAmB,cAAA,cAAOI,EAAKG,MAAZ,KACAR,EAAAlB,EAAAmB,cAAA,cAAOI,EAAKI,WAAZ,kBAtDQC,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjB,EAAAlB,EAAAmB,cAACiB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlC,KAAK,SAAAmC,GACjCA,EAAaC","file":"static/js/main.7714cc4c.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport axios from 'axios';\n\nclass App extends Component {\n\n  state = {\n  \tsubjects : []\n  }\n\n\n  componentDidMount(){\n\n  \tconst url = 'http://tsu.creativestudio.ge/subjects';\n\n  \tsetInterval(()=> {\n  \t\tthis.getSubjects(url);\n  \t}, 10000)\n\n  \tconsole.log('componentDidMount', this.state.subjects);\n  \t \n  }\n\n  \tgetSubjects = async url => {\n\n\t    axios.get(url).then( res => {\n\t    \tthis.setState({\n\t    \t\tsubjects:res.data\n\t    \t});\n\t    });\n\n\t};\n\n\n\n\n  render() {\n\n    return (\n      <div className=\"App\"> \n       \t\t<table border=\"1\">\n\t\t\t\t  <thead>\n\t\t\t\t\t  <tr>\n\t\t\t\t\t    <th>ID</th>\n\t\t\t\t\t    <th>title</th>\n\t\t\t\t\t    <th>faculty ID</th>\n\t\t\t\t\t   \n\t\t\t\t\t  </tr>\n\t\t\t\t  </thead>\n\t\t\t\t  <tbody>\n\t\t\t\t  {\n\t\t\t\t  \t\n\t\t\t\t  \tthis.state.subjects.map( item => {\n\t\t\t\t  \t\t\n\t\t\t\t  \t\treturn (\n\t\t\t\t  \t\t\t<tr key =  { item.id } >\n\t\t\t\t\t  \t\t\t<td> { item.id } </td>\n\t\t\t\t\t  \t\t\t<td> { item.title } </td>\n\t\t\t\t\t  \t\t\t<td> { item.faculty_id } </td>\n\t\t\t\t  \t\t\t</tr>\n\t\t\t\t  \t\t)\n\n\t\t\t\t  \t})\n\n\t\t\t\t  }\n\t\t  \t\t</tbody>\n  \t\t\t </table>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}